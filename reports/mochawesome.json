{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-08T09:35:43.428Z",
    "end": "2024-06-08T09:35:43.925Z",
    "duration": 497,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0de5cdb2-d7b8-4021-a1ec-b5175e7e5168",
      "title": "",
      "fullFile": "G:\\Cypress\\mocha-chai-automation-api-testing\\test\\scenarios\\satu.test.js",
      "file": "\\test\\scenarios\\satu.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "220eba9c-9504-421f-96e2-c80a473b298b",
          "title": "As an user I want to test Gorest Public API",
          "fullFile": "G:\\Cypress\\mocha-chai-automation-api-testing\\test\\scenarios\\satu.test.js",
          "file": "\\test\\scenarios\\satu.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get only 10 todos",
              "fullTitle": "As an user I want to test Gorest Public API should get only 10 todos",
              "timedOut": false,
              "duration": 366,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(`${API_BASE_URL}/todos`);\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.data));\nexpect(response.data).to.have.lengthOf(10);\nresponse.data.forEach(todo => {\n  assert.strictEqual(typeof todo.id, 'number');\n  assert.strictEqual(typeof todo.user_id, 'number');\n  assert.strictEqual(typeof todo.title, 'string');\n  expect(response.data[0]).to.have.all.keys(\"id\", \"user_id\", \"title\", \"due_on\", \"status\");\n});",
              "err": {},
              "uuid": "ed925c54-0f8b-4f6f-9d01-a93bde7f91cd",
              "parentUUID": "220eba9c-9504-421f-96e2-c80a473b298b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get users with status inactive and validate data",
              "fullTitle": "As an user I want to test Gorest Public API should get users with status inactive and validate data",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(`${API_BASE_URL}/users?status=inactive`);\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.data));\nresponse.data.forEach(user => {\n  assert.strictEqual(typeof user.id, 'number');\n  assert.strictEqual(typeof user.name, 'string');\n  assert.strictEqual(typeof user.email, 'string');\n  assert.strictEqual(typeof user.email, 'string');\n  assert.strictEqual(typeof user.status, 'string');\n  expect(response.data[0]).to.have.all.keys(\"id\", \"name\", \"email\", \"gender\", \"status\");\n  expect(user.status).to.equal('inactive');\n});",
              "err": {},
              "uuid": "21d72d05-02ba-4d62-ba7f-523248bc447b",
              "parentUUID": "220eba9c-9504-421f-96e2-c80a473b298b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed925c54-0f8b-4f6f-9d01-a93bde7f91cd",
            "21d72d05-02ba-4d62-ba7f-523248bc447b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 491,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/"
      },
      "version": "6.2.0"
    }
  }
}